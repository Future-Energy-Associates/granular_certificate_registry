"""first_migration

Revision ID: 61e06ddd23e6
Revises: 
Create Date: 2024-09-22 12:58:15.340058

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "61e06ddd23e6"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "account",
        sa.Column("account_name", sa.String(), nullable=False),
        sa.Column("ids", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "granularcertificateaction",
        sa.Column("action_type", sa.String(), nullable=False),
        sa.Column("source_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("target_id", sa.Integer(), nullable=True),
        sa.Column("source_certificate_issuance_id", sa.Integer(), nullable=True),
        sa.Column(
            "source_certificate_bundle_id_range_start", sa.Integer(), nullable=True
        ),
        sa.Column(
            "source_certificate_bundle_id_range_end", sa.Integer(), nullable=True
        ),
        sa.Column("action_request_datetime", sa.DateTime(), nullable=False),
        sa.Column("action_completed_datetime", sa.DateTime(), nullable=False),
        sa.Column("initial_action_datetime", sa.DateTime(), nullable=True),
        sa.Column("recurring_action_period_units", sa.String(), nullable=True),
        sa.Column("recurring_action_period_quantity", sa.Integer(), nullable=True),
        sa.Column("number_of_recurring_actions", sa.Integer(), nullable=True),
        sa.Column("beneficiary", sa.String(), nullable=True),
        sa.Column("certificate_period_start", sa.DateTime(), nullable=True),
        sa.Column("certificate_period_end", sa.DateTime(), nullable=True),
        sa.Column("certificate_quantity", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=True),
        sa.Column("energy_source", sa.String(), nullable=True),
        sa.Column("certificate_status", sa.String(), nullable=True),
        sa.Column("id_to_update_to", sa.Integer(), nullable=True),
        sa.Column("certificate_status_to_update_to", sa.String(), nullable=True),
        sa.Column("action_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("action_id"),
    )
    op.create_table(
        "measurementreport",
        sa.Column("device_id", sa.Integer(), nullable=False),
        sa.Column("interval_start_datetime", sa.DateTime(), nullable=False),
        sa.Column("interval_end_datetime", sa.DateTime(), nullable=False),
        sa.Column("interval_usage", sa.Integer(), nullable=False),
        sa.Column("gross_net_indicator", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "secureapiuser",
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("picture", sa.String(), nullable=True),
        sa.Column("scopes", sa.String(), nullable=True),
        sa.Column("hashed_password", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("username"),
    )
    op.create_table(
        "tokenblacklist",
        sa.Column("token", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("token"),
    )
    op.create_table(
        "user",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("primary_contact", sa.String(), nullable=False),
        sa.Column("role", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("account_ids", sa.ARRAY(sa.String()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "device",
        sa.Column("device_name", sa.String(), nullable=False),
        sa.Column("grid", sa.String(), nullable=False),
        sa.Column("energy_source", sa.String(), nullable=False),
        sa.Column("technology_type", sa.String(), nullable=False),
        sa.Column("operational_date", sa.DateTime(), nullable=False),
        sa.Column("capacity", sa.Float(), nullable=False),
        sa.Column("peak_demand", sa.Float(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("account_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["account.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "storageaction",
        sa.Column("action_response_status", sa.String(), nullable=False),
        sa.Column("source_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("source_allocation_id", sa.Integer(), nullable=True),
        sa.Column("action_request_datetime", sa.DateTime(), nullable=False),
        sa.Column("action_completed_datetime", sa.DateTime(), nullable=True),
        sa.Column("charging_period_start", sa.DateTime(), nullable=True),
        sa.Column("charging_period_end", sa.DateTime(), nullable=True),
        sa.Column("storage_id", sa.Integer(), nullable=True),
        sa.Column("storage_energy_source", sa.String(), nullable=True),
        sa.Column("action_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["account.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("action_id"),
    )
    op.create_table(
        "useraccountlink",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("account_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["account.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "account_id"),
    )
    op.create_table(
        "granularcertificatebundle",
        sa.Column("certificate_status", sa.String(), nullable=False),
        sa.Column("account_id", sa.Integer(), nullable=False),
        sa.Column("bundle_id_range_start", sa.BigInteger(), nullable=False),
        sa.Column("bundle_id_range_end", sa.BigInteger(), nullable=False),
        sa.Column("bundle_quantity", sa.BigInteger(), nullable=False),
        sa.Column("energy_carrier", sa.String(), nullable=False),
        sa.Column("energy_source", sa.String(), nullable=False),
        sa.Column("face_value", sa.Integer(), nullable=False),
        sa.Column(
            "issuance_post_energy_carrier_conversion", sa.Boolean(), nullable=False
        ),
        sa.Column("registry_configuration", sa.Integer(), nullable=False),
        sa.Column("device_id", sa.Integer(), nullable=False),
        sa.Column("device_name", sa.String(), nullable=False),
        sa.Column("device_technology_type", sa.String(), nullable=False),
        sa.Column("device_production_start_date", sa.DateTime(), nullable=False),
        sa.Column("device_capacity", sa.Integer(), nullable=False),
        sa.Column("device_location", sa.ARRAY(sa.Float()), nullable=True),
        sa.Column("device_type", sa.String(), nullable=False),
        sa.Column("production_starting_interval", sa.DateTime(), nullable=False),
        sa.Column("production_ending_interval", sa.DateTime(), nullable=False),
        sa.Column("issuance_datestamp", sa.DateTime(), nullable=False),
        sa.Column("expiry_datestamp", sa.DateTime(), nullable=False),
        sa.Column("storage_id", sa.Integer(), nullable=True),
        sa.Column("sdr_allocation_id", sa.Integer(), nullable=True),
        sa.Column("discharging_start_datetime", sa.DateTime(), nullable=True),
        sa.Column("discharging_end_datetime", sa.DateTime(), nullable=True),
        sa.Column("storage_device_location", sa.ARRAY(sa.Float()), nullable=True),
        sa.Column("storage_efficiency_factor", sa.Float(), nullable=True),
        sa.Column("country_of_issuance", sa.String(), nullable=False),
        sa.Column("connected_grid_identification", sa.String(), nullable=False),
        sa.Column("issuing_body", sa.String(), nullable=False),
        sa.Column("legal_status", sa.String(), nullable=True),
        sa.Column("issuance_purpose", sa.String(), nullable=True),
        sa.Column("support_received", sa.String(), nullable=True),
        sa.Column("quality_scheme_reference", sa.String(), nullable=True),
        sa.Column("dissemination_level", sa.String(), nullable=True),
        sa.Column("issue_market_zone", sa.String(), nullable=False),
        sa.Column("emissions_factor_production_device", sa.Float(), nullable=True),
        sa.Column("emissions_factor_source", sa.String(), nullable=True),
        sa.Column("issuance_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["account.id"],
        ),
        sa.ForeignKeyConstraint(
            ["device_id"],
            ["device.id"],
        ),
        sa.ForeignKeyConstraint(
            ["storage_id"],
            ["device.id"],
        ),
        sa.PrimaryKeyConstraint(
            "bundle_id_range_start", "bundle_id_range_end", "issuance_id"
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("granularcertificatebundle")
    op.drop_table("useraccountlink")
    op.drop_table("storageaction")
    op.drop_table("device")
    op.drop_table("user")
    op.drop_table("tokenblacklist")
    op.drop_table("secureapiuser")
    op.drop_table("measurementreport")
    op.drop_table("granularcertificateaction")
    op.drop_table("account")
    # ### end Alembic commands ###
