# Imports
{% for module_import in module_imports %}{{ module_import }}
{% endfor %}

environment = os.getenv('ENVIRONMENT')


# Router initialisation
router = APIRouter(tags=['Entities'])



{% for table_spec in tables_spec %}# {{ table_spec['schema_name'] }}
@router.post('/{{ table_spec['schema_name'].lower() }}', response_model={{ schema_module_str }}.{{ table_spec['schema_name'] }}Read)
def create_{{ table_spec['schema_name'].lower() }}(
    {{ table_spec['schema_name'].lower() }}: {{ schema_module_str }}.{{ table_spec['schema_name'] }}Base,
    headers: dict = Depends(authentication.validate_user_and_get_headers),
    session: Session = Depends({{ db_obj_str }}.yield_session)
):
    db_{{ table_spec['schema_name'].lower() }} = {{ schema_module_str }}.{{ table_spec['schema_name'] }}.create({{ table_spec['schema_name'].lower() }}, session)

    return utils.format_json_response(db_{{ table_spec['schema_name'].lower() }}, headers, response_model={{ schema_module_str }}.{{ table_spec['schema_name'] }}Read)

@router.get('/{{ table_spec['schema_name'].lower() }}/{% raw %}{{% endraw %}{{ table_spec['schema_pk_name'] }}{% raw %}}{% endraw %}', response_model={{ schema_module_str }}.{{ table_spec['schema_name'] }}Read)
def read_{{ table_spec['schema_name'].lower() }}(
    {{ table_spec['schema_pk_name'] }}: {{ table_spec['schema_pk_type'] }},
    headers: dict = Depends(authentication.validate_user_and_get_headers),
    session: Session = Depends({{ db_obj_str }}.yield_session)
):
    db_{{ table_spec['schema_name'].lower() }} = {{ schema_module_str }}.{{ table_spec['schema_name'] }}.by_id(process_uuid({{ table_spec['schema_pk_name'] }}), session)

    return utils.format_json_response(db_{{ table_spec['schema_name'].lower() }}, headers, response_model={{ schema_module_str }}.{{ table_spec['schema_name'] }}Read)

@router.patch('/{{ table_spec['schema_name'].lower() }}/{% raw %}{{% endraw %}{{ table_spec['schema_pk_name'] }}{% raw %}}{% endraw %}', response_model={{ schema_module_str }}.{{ table_spec['schema_name'] }}Read)
def update_{{ table_spec['schema_name'].lower() }}(
    {{ table_spec['schema_name'].lower() }}: {{ schema_module_str }}.{{ table_spec['schema_name'] }}Update,
    headers: dict = Depends(authentication.validate_user_and_get_headers),
    session: Session = Depends({{ db_obj_str }}.yield_session)
):
    db_{{ table_spec['schema_name'].lower() }} = {{ schema_module_str }}.{{ table_spec['schema_name'] }}.by_id(process_uuid({{ table_spec['schema_name'].lower() }}.{{ table_spec['schema_pk_name'] }}), session)
    db_{{ table_spec['schema_name'].lower() }}.update({{ table_spec['schema_name'].lower() }}, session)

    return utils.format_json_response(db_{{ table_spec['schema_name'].lower() }}, headers, response_model={{ schema_module_str }}.{{ table_spec['schema_name'] }}Read)

@router.delete('/{{ table_spec['schema_name'].lower() }}/{% raw %}{{% endraw %}{{ table_spec['schema_pk_name'] }}{% raw %}}{% endraw %}', response_model={{ schema_module_str }}.{{ table_spec['schema_name'] }}Read)
def delete_{{ table_spec['schema_name'].lower() }}(
    {{ table_spec['schema_pk_name'] }}: {{ table_spec['schema_pk_type'] }},
    headers: dict = Depends(authentication.validate_user_and_get_headers),
    session: Session = Depends({{ db_obj_str }}.yield_session)
):
    db_{{ table_spec['schema_name'].lower() }} = {{ schema_module_str }}.{{ table_spec['schema_name'] }}.by_id({{ table_spec['schema_pk_name'] }}, session)
    db_{{ table_spec['schema_name'].lower() }}.delete(session)

    return utils.format_json_response(db_{{ table_spec['schema_name'].lower() }}, headers, response_model={{ schema_module_str }}.{{ table_spec['schema_name'] }}Read)


{% endfor %}